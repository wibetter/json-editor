import { cloneDeep as e, isEqual as t } from 'lodash';
function r(t) {
  return e(t);
}
function i(e, r) {
  return t(e, r);
}
function a(e) {
  var t = !1;
  return null != e && (t = !0), t;
}
function p(e, t, i) {
  var a = t;
  if ((i && (a = r(t)), e))
    for (var p = e.split('-'), o = 0, n = p.length; o < n; o++) {
      var l = p[o];
      l && (a = a && a[l]);
    }
  return a;
}
function o(e, t, i) {
  var a = t;
  if ((i && (a = r(t)), e))
    for (var p = e.split('-'), o = 0, n = p.length; o < n; o++) {
      var l = p[o];
      if (
        '0' !== l ||
        ('array' !== a.type &&
          'radio' !== a.type &&
          'single-select' !== a.type &&
          'checkboxes' !== a.type) ||
        (!a.options && !a.items)
      ) {
        if (l) {
          var u = '0';
          if (a.propertyOrder) u = a.propertyOrder[l];
          else if (a.properties) {
            u = Object.keys(a.properties)[l];
          }
          a = a.properties[u];
        }
      } else a = a.options || a.items;
    }
  return a;
}
function n(e, t, i) {
  var a = t;
  if ((i && (a = r(t)), e && a))
    for (var p = e.split('-'), o = 0, n = p.length; o < n; o++) {
      var l = p[o];
      l && a.properties && (a = a.properties[l]);
    }
  return a;
}
function l(e, t) {
  for (var r = t, i = '', a = e.split('-'), p = 0, o = a.length; p < o; p++) {
    var n = a[p];
    if ('0' === n && r.items) (r = r.items), (i = i ? i + '-items' : 'items');
    else if ('0' === n && r.options)
      (r = r.options), (i = i ? i + '-options' : 'options');
    else if (n) {
      var l = '0';
      if (r.propertyOrder) l = r.propertyOrder[n];
      else if (r.properties) {
        l = Object.keys(r.properties)[n];
      }
      (r = r.properties[l]), (i = i ? i + '-' + l : l);
    }
  }
  return i;
}
function u(e, t) {
  for (var r = t, i = '', a = e.split('-'), p = 0, o = a.length; p < o; p++) {
    var n = a[p];
    if (n) {
      var l = -1;
      if (r.propertyOrder)
        (l = r.propertyOrder.indexOf(n)), (r = r.properties[n]);
      else if (r.properties) {
        (l = Object.keys(r.properties).indexOf(n)), (r = r.properties[n]);
      } else
        r.items
          ? ((l = 0), (r = r.items))
          : r.options && ((l = 0), (r = r.options));
      i = i ? i + '-' + l : l.toString();
    }
  }
  return i;
}
var s,
  c,
  d,
  y,
  f,
  m = {
    type: 'object',
    title: '对象Object',
    description: '',
    properties: {
      a:
        ((s = { type: 'string', title: '单文本框' }),
        (s.type = 'input'),
        (s.default = ''),
        (s.description = ''),
        (s.placeholder = ''),
        s),
    },
    propertyOrder: ['a'],
  },
  v = {
    type: 'event',
    title: '事件',
    properties: {
      type: {
        default: 'emit',
        type: 'typeSelect',
        enum: ['on', 'emit'],
        enumextra: ['on', 'emit'],
        title: '事件类型',
      },
      trigger: {
        type: 'input',
        default: 'eventName',
        title: '触发事件',
        description: '用于输入触发事件的名称',
        placeholder: '请输入触发事件的名称',
      },
      eventData: {
        title: '事件数据',
        type: 'json',
        default: '{}',
        description: '传递给触发事件的数据对象',
      },
    },
    propertyOrder: ['type', 'trigger', 'eventData'],
  },
  b = {
    type: 'datasource',
    title: '数据源',
    properties: {
      type: {
        default: 'local',
        type: 'typeSelect',
        enum: ['local', 'remote'],
        enumextra: ['local', 'remote'],
        title: '数据源类型',
      },
      data: {
        title: '本地json数据',
        placeholder: '请输入静态json数据',
        type: 'json',
        default: '{}',
        description: '用于设置本地的静态json数据',
        isRequired: !0,
      },
      filter: {
        title: '过滤器',
        type: 'codearea',
        default: '() => {}',
        description: '用于定义过滤当前数据的函数',
        isRequired: !0,
      },
    },
    propertyOrder: ['type', 'data', 'filter'],
  },
  g =
    (((f = { type: 'object' }).type = 'datasource'),
    (f.title = '数据源'),
    (f.properties = {
      type:
        ((c = { type: 'string', default: 'remote' }),
        (c.type = 'typeSelect'),
        (c.enum = ['local', 'remote']),
        (c.enumextra = ['local', 'remote']),
        (c.title = '数据源类型'),
        c),
      data:
        ((d = {
          type: 'string',
          title: '远程json数据',
          placeholder: '请输入远程json数据源地址',
        }),
        (d.type = 'url'),
        (d.default = 'http://xxx'),
        (d.isRequired = !0),
        (d.description = '用于设置获取元素数据的请求地址'),
        d),
      filter:
        ((y = { type: 'string', title: '过滤器' }),
        (y.type = 'codearea'),
        (y.default = '() => {}'),
        (y.description = '用于定义过滤当前数据的函数'),
        (y.isRequired = !0),
        y),
    }),
    (f.propertyOrder = ['type', 'data', 'filter']),
    f),
  j = {
    type: 'local',
    config: { dataName: '', body: {}, filter: 'return data;' },
    data: '{}',
    localFilter: 'return data;',
  },
  h = {
    jsonschema: {
      type: 'object',
      title: 'jsonSchemaObject',
      properties: {
        func: {
          type: 'object',
          title: '功能设置',
          isFixed: !0,
          properties: {
            a: {
              title: '单文本框',
              type: 'input',
              default: '',
              description: '',
              placeholder: '',
              isRequired: !1,
            },
          },
          propertyOrder: ['a'],
        },
        style: {
          type: 'object',
          title: '样式设置',
          isFixed: !0,
          properties: {
            b: {
              title: '单文本框',
              type: 'input',
              default: '',
              description: '',
              placeholder: '',
            },
          },
          propertyOrder: ['b'],
        },
        data: {
          type: 'data',
          title: '数据设置',
          isFixed: !0,
          properties: {
            c: {
              title: '单文本框',
              type: 'input',
              default: '',
              description: '',
              placeholder: '',
              isRequired: !1,
            },
          },
          propertyOrder: ['c'],
        },
      },
      propertyOrder: ['func', 'style', 'data'],
    },
    input: {
      title: '单文本框',
      type: 'input',
      default: '',
      description: '',
      placeholder: '',
    },
    boolean: { type: 'boolean', title: '布尔值', default: !1, description: '' },
    object: m,
    array: {
      type: 'array',
      title: '数组Array',
      description: '',
      items: {
        type: 'object',
        title: '数组项',
        description: '',
        properties: {
          name: {
            type: 'input',
            title: '名字',
            default: '',
            description: '',
            placeholder: '',
          },
        },
        propertyOrder: ['name'],
      },
    },
    'empty-array': {
      type: 'array',
      title: '数组Array',
      description: '',
      items: {
        type: 'object',
        title: '数组项',
        description: '',
        properties: {},
      },
    },
    'empty-object': {
      type: 'object',
      title: '对象Object',
      description: '',
      properties: {},
    },
    url: {
      type: 'url',
      title: '链接地址url',
      default: '',
      description: '',
      placeholder: '',
    },
    textarea: {
      type: 'textarea',
      title: '多行文本框',
      default: '',
      description: '',
      placeholder: '',
    },
    color: {
      type: 'color',
      title: '颜色color',
      default: '#ffffff',
      description: '',
    },
    image: {
      title: '图片',
      type: 'image',
      default: '',
      description: '上传图片',
      imgWidth: 200,
      imgHeight: 200,
      imgRatioReadOnly: !0,
    },
    number: {
      type: 'number',
      title: '数量number',
      default: 1,
      minimum: 0,
      maximum: 1e3,
      description: '',
    },
    json: { title: 'json数据', type: 'json', default: '{}', description: '' },
    codearea: {
      type: 'codearea',
      title: '函数类型',
      placeholder: '请输入函数方法',
      default: 'function func() { console.log("hello, world!"); }',
      description: '用于定义函数方法',
    },
    htmlarea: {
      title: '富文本',
      type: 'htmlarea',
      placeholder: '请输入html代码片段',
      default: '<p>hello,world!</p>',
      description: '用于放置html代码片段',
    },
    'text-editor': {
      type: 'text-editor',
      title: '富文本',
      default: '',
      description: '',
      placeholder: '',
    },
    date: {
      type: 'date',
      title: '日期Date',
      default: '',
      description: '',
      placeholder: '',
    },
    'date-time': {
      type: 'date-time',
      title: '日期时间',
      default: '',
      description: '',
      placeholder: '',
    },
    time: {
      type: 'time',
      title: '时间Time',
      default: '',
      description: '',
      placeholder: '',
    },
    quantity: {
      type: 'quantity',
      title: '单位计量',
      properties: {
        unit: {
          type: 'number',
          title: '单位数值',
          default: 50,
          minimum: 0,
          maximum: 1e3,
          description: '',
        },
        quantity: {
          type: 'typeSelect',
          default: 'px',
          enum: ['px', 'rem', 'em', '%'],
          enumextra: ['px', 'rem', 'em', '%'],
          title: '单位类型',
        },
      },
      propertyOrder: ['unit', 'quantity'],
    },
    'box-style': {
      type: 'box-style',
      title: '盒子模型',
      properties: {
        unit: {
          title: '单位数值',
          type: 'string',
          default: '0',
          description: '',
        },
        quantity: {
          type: 'typeSelect',
          default: 'px',
          enum: ['px', 'rem', 'em', '%'],
          enumextra: ['px', 'rem', 'em', '%'],
          title: '单位类型',
        },
      },
      propertyOrder: ['unit', 'quantity'],
    },
    radio: {
      type: 'radio',
      title: '单选',
      options: [
        { label: '选项a', value: 'a' },
        { label: '选项b', value: 'b' },
        { label: '选项c', value: 'c' },
      ],
      default: 'a',
      description: '',
    },
    'single-select': {
      type: 'single-select',
      title: '下拉单选',
      options: [
        { label: '选项a', value: 'a' },
        { label: '选项b', value: 'b' },
        { label: '选项c', value: 'c' },
      ],
      default: 'a',
      description: '',
    },
    checkboxes: {
      type: 'checkboxes',
      title: '多选',
      options: [
        { label: '选项a', value: 'a' },
        { label: '选项b', value: 'b' },
        { label: '选项c', value: 'c' },
      ],
      default: ['a'],
      description: '',
    },
    'dynamic-data': {
      type: 'dynamic-data',
      title: '动态数据源',
      properties: {
        type: {
          default: 'local',
          type: 'typeSelect',
          enum: ['local', 'remote'],
          enumextra: ['本地数据', '接口数据'],
          title: '数据类型',
        },
        config: {
          title: '接口配置',
          type: 'object',
          description: '用于存放接口的配置数据(url、请求参数等)',
          isRequired: !0,
          properties: {
            dataName: {
              default: 'local',
              type: 'typeSelect',
              enum: ['local', 'remote'],
              enumextra: ['本地数据', '接口数据'],
              title: '数据类型',
            },
            body: {
              type: 'object',
              title: '请求参数配置',
              description: '用于配置当前接口的请求参数数值',
              isRequired: !0,
            },
            filter: {
              title: '过滤器函数体',
              type: 'codearea',
              default: 'return data;',
              description: '用于定义过滤接口数据',
              isRequired: !0,
            },
          },
          propertyOrder: ['dataName', 'body', 'filter'],
        },
        data: {
          title: '数据内容',
          type: 'json',
          default: '{}',
          description: '用于存放DynamicData的数据内容',
          isRequired: !0,
        },
        localFilter: {
          title: '过滤器',
          type: 'codearea',
          default: 'return data;',
          description: '用于定义过滤本地数据',
          isRequired: !0,
        },
      },
      propertyOrder: ['type', 'config', 'data', 'localFilter'],
    },
    datasource: b,
    event: v,
  },
  O = {
    on: {
      type: 'event',
      title: '事件',
      properties: {
        type: {
          default: 'on',
          type: 'typeSelect',
          enum: ['on', 'emit'],
          enumextra: ['on', 'emit'],
          title: '事件类型',
        },
        register: {
          type: 'input',
          default: 'eventName',
          title: '注册事件',
          description: '用于输入注册事件的名称',
          placeholder: '请输入注册事件的名称',
        },
        actionFunc: {
          title: '执行函数',
          type: 'codearea',
          default: '() => {}',
          description: '',
        },
      },
      propertyOrder: ['type', 'register', 'actionFunc'],
    },
    emit: v,
  },
  x = { local: b, remote: g };
function q(e) {
  return /^http[s]?:\/\/.*/.test(e);
}
function k(e) {
  return 'String' === Object.prototype.toString.call(e).slice(8, -1);
}
function S(e) {
  return (
    'number' == typeof e ||
    '[object Number]' === Object.prototype.toString.call(e)
  );
}
function N(e) {
  return 'Boolean' === Object.prototype.toString.call(e).slice(8, -1);
}
function F(e) {
  return /^\d{4}-\d{2}-\d{2}$/.test(e);
}
function D(e) {
  return (
    /^\d{4}-\d{2}-\d{2}\s\d{2}:\d{2}$/.test(e) ||
    /^\d{4}-\d{2}-\d{2}\s\d{2}:\d{2}:\d{2}$/.test(e)
  );
}
function R(e) {
  return /^\d{2}:\d{2}:\d{2}$/.test(e) || /^\d{2}:\d{2}$/.test(e);
}
function $(e) {
  var t = !1;
  return (
    'Array' === Object.prototype.toString.call(e).slice(8, -1) && (t = !0), t
  );
}
function w(e) {
  if (!$(e)) return !1;
  for (var t = 0, r = e.length; t < r; t++) {
    if (!k(e[t])) return !1;
  }
  return !0;
}
function J(e) {
  var t = !1;
  return (
    'Object' === Object.prototype.toString.call(e).slice(8, -1) && (t = !0), t
  );
}
function T(e) {
  var t = !1;
  return h.quantity.properties.quantity.enum.indexOf(e) >= 0 && (t = !0), t;
}
function A(e) {
  return /^#[0-9a-f]{6}$/.test(e) || /^#[0-9a-f]{3}$/.test(e);
}
function E(e) {
  var t = !1;
  return (
    'Function' === Object.prototype.toString.call(e).slice(8, -1) && (t = !0), t
  );
}
function B(e) {
  var t = {};
  return (
    (t =
      e && J(e)
        ? (function (e) {
            var t;
            if (J(e)) {
              var i = Object.keys(e);
              e.data && e.filter && 2 === i.length
                ? (t = $(e.data) || J(e.data) ? r(x.local) : r(x.remote))
                : e.trigger && e.eventData && 2 === i.length
                  ? (t = r(O.emit))
                  : e.register && e.actionFunc && 2 === i.length
                    ? (t = r(O.on))
                    : e.quantity && T(e.quantity) && 2 === i.length
                      ? (t = r(h.quantity))
                      : ((t = r(h['empty-object'])),
                        Object.keys(e).map(function (r) {
                          var i = e[r];
                          t.properties[r] = B(i);
                        }));
            }
            return t;
          })(e)
        : e && $(e)
          ? (function (e) {
              var t;
              if (e && $(e))
                if (w(e)) {
                  (t = r(h.select)).items.enum = e;
                  var i = t.items.enumextra.length,
                    a = e.length;
                  if (a > i)
                    for (var p = i, o = a; p < o; p++)
                      t.items.enumextra.push('选项' + e(p));
                } else {
                  t = r(h['empty-array']);
                  var n = B(e[0]);
                  t.items.properties = n.properties;
                }
              return t;
            })(e)
          : (function (e) {
              var t = '';
              if (N(e)) t = r(h.boolean);
              else if (S(e)) t = r(h.number);
              else if (q(e)) t = r(h.url);
              else if (F(e)) t = r(h.date);
              else if (D(e)) t = r(h['date-time']);
              else if (R(e)) t = r(h.time);
              else if (A(e)) t = r(h.color);
              else
                try {
                  t = S(JSON.parse(e)) ? r(h.input) : r(h.json);
                } catch (i) {
                  t = e && e.length > 30 ? r(h.textarea) : r(h.input);
                }
              return t;
            })(e)),
    t
  );
}
function H(e, t) {
  var r = t || {};
  if (J(e) && 'object' === e.type && e.properties) {
    (e.propertyOrder ? e.propertyOrder : Object.keys(e.properties)).map(
      function (t) {
        var i = e.properties[t];
        r = U(i, r);
      },
    );
  }
  return r;
}
function U(e, t) {
  var r = !t,
    i = t || {};
  if (e && '{}' !== JSON.stringify(e)) {
    var a = e.type;
    'object' === a || 'func' === a || 'style' === a || 'data' === a
      ? (!r && i.object ? (i.object += 1) : r || (i.object = 1), (i = H(e, i)))
      : 'array' === a
        ? (!r && i.array ? (i.array += 1) : r || (i.array = 1),
          (i = H((e = e.items), i)))
        : !r && i[a]
          ? (i[a] += 1)
          : r || (i[a] = 1);
  }
  return i;
}
function W(e) {
  var t = r(e);
  if (
    (!t.title && t.description && (t.title = t.description),
    t.type || (t.type = t.format),
    ('quantity' !== t.type &&
      'array' !== t.type &&
      'datasource' !== t.type &&
      'event' !== t.type &&
      'object' !== t.type &&
      'radio' !== t.type &&
      'checkboxes' !== t.type) ||
      !a(t.default) ||
      delete t.default,
    'radio' === t.type &&
      ((t.type = 'string'),
      t.enum &&
        t.enumextra &&
        ((t.items = {
          type: 'string',
          enum: r(t.enum),
          enumextra: r(t.enumextra),
        }),
        delete t.enum,
        delete t.enumextra)),
    'quantity' === t.type)
  ) {
    var i = t.properties,
      p = r(h.quantity);
    if (i.quantity && J(i.quantity) && i.quantity.default) {
      var o = i.quantity.default;
      p.properties.quantity.default = 'percent' === o ? '%' : o;
    }
    t = p;
  }
  if ('datasource' === t.type) {
    var n = t.properties,
      l = n.type && n.type.default,
      u = n.data && n.data.default,
      s = n.filter && n.filter.default;
    'local' === l
      ? ((t = r(x.local)).properties.data.default = u ? r(u) : '{}')
      : ((t = r(x.remote)).properties.data.default = u ? r(u) : 'http://xxx'),
      (t.properties.filter.default = s ? r(s) : '() => {}');
  }
  if ('event' === t.type) {
    var c = t.properties,
      d = c.type && c.type.default;
    if ('in' === d || 'on' === d) {
      var y = (c.filter && c.filter.default) || '() => {}';
      (t = r(O.on)),
        c.actionFunc &&
          J(c.actionFunc) &&
          (t.properties.actionFunc.default = c.actionFunc.default || r(y));
    } else {
      var f = (c.filter && c.filter.default) || '{}';
      (t = r(O.emit)),
        c.eventData &&
          J(c.eventData) &&
          (t.properties.eventData.default = c.eventData.default || r(f));
    }
  }
  return (
    t.properties &&
      (t.propertyOrder || (t.propertyOrder = Object.keys(t.properties)),
      t.propertyOrder.map(function (e) {
        t.properties[e] = Z(t.properties[e]);
      })),
    t.items && (t.items = Z(t.items)),
    t
  );
}
function Z(e) {
  var t = r(e);
  return (
    t.required || delete t.required,
    t.type && t.type && (t.type = t.type),
    ('quantity' !== t.type &&
      'array' !== t.type &&
      'datasource' !== t.type &&
      'event' !== t.type &&
      'object' !== t.type &&
      'radio' !== t.type &&
      'checkboxes' !== t.type) ||
      !a(t.default) ||
      delete t.default,
    ('radio' !== t.type &&
      'checkboxes' !== t.type &&
      'single-select' !== t.type) ||
      (t.items &&
        t.items.enum &&
        t.items.enumextra &&
        ((t.options = []),
        t.items.enum.forEach(function (e, r) {
          t.options.push({ label: t.items.enumextra[r] || e, value: e });
        }),
        delete t.items)),
    t.properties &&
      (t.propertyOrder || (t.propertyOrder = Object.keys(t.properties)),
      t.propertyOrder.map(function (e) {
        t.properties[e] = Z(t.properties[e]);
      })),
    'array' === t.type && t.items && (t.items = Z(t.items)),
    t
  );
}
function z(e, t) {
  var r = '',
    i = t;
  a(i) && a(e.default) && typeof i != typeof e.default && (i = void 0);
  var p = a(i) ? i : e.default;
  switch (e.type) {
    case 'string':
      if ('typeSelect' === e.type) r = e.default;
      else if ('color' === e.type)
        ('#fff' !== p && '#FFF' !== p) || (p = '#ffffff'), (r = p || '#ffffff');
      else if ('json' === e.type) {
        var o = '';
        if (J(t) || $(t)) o = t;
        else if (E(t) || '' === t) o = {};
        else
          try {
            o = JSON.parse(t);
          } catch (e) {
            o = {};
          }
        r = o;
      } else r = a(p) ? p : '';
      break;
    case 'boolean':
      r = !!a(p) && p;
      break;
    case 'number':
      r = a(p) ? p : 1;
      break;
    default:
      r = a(p) ? p : '';
  }
  return r;
}
function C(e, t) {
  var i = {},
    p = e.type;
  if (J(e) && 'object' === e.type) {
    var o = e,
      n = t;
    a(n) && a(o.default) && typeof n != typeof o.default && (n = void 0);
    var l = a(n) ? n : o.default;
    if ('dynamic-data' === p)
      (i = r(j)),
        l && J(l) && '{}' !== JSON.stringify(l) && (i = Object.assign(i, l));
    else if ('datasource' === p)
      o.properties &&
      o.properties.type &&
      o.properties.type.default &&
      'local' === o.properties.type.default
        ? ((i = { data: '{}', filter: '() => {}' }),
          l && l.data && (i.data = l.data),
          l && l.filter && (i.filter = l.filter),
          'http://xxx' === i.data && (i.data = '{}'))
        : ((i = { data: 'http://xxx', filter: '() => {}' }),
          l && l.data && (i.data = l.data),
          l && l.filter && (i.filter = l.filter),
          '{}' === i.data && (i.data = 'http://xxx'));
    else if ('event' === p)
      o.properties &&
      o.properties.type &&
      o.properties.type.default &&
      'emit' === o.properties.type.default
        ? l && 'out' === l.type
          ? (i = { trigger: (l && l.filter) || 'eventName', eventData: '{}' })
          : ((i = { trigger: 'eventName', eventData: '{}' }),
            l && l.trigger && (i.trigger = l.trigger),
            l && l.eventData && (i.eventData = l.eventData))
        : l && 'in' === l.type
          ? (i = {
              register: 'eventName',
              actionFunc: (l && l.filter) || '() => {}',
            })
          : ((i = { register: 'eventName', actionFunc: '() => {}' }),
            l && l.register && (i.register = l.register),
            l && l.actionFunc && (i.actionFunc = l.actionFunc));
    else if (e.properties) {
      (e.propertyOrder ? e.propertyOrder : Object.keys(e.properties)).map(
        function (r) {
          var a = e.properties[r],
            p = t && t[r];
          switch (a.type) {
            case 'array':
              i[r] = G(a, p);
              break;
            case 'object':
              i[r] = C(a, p);
              break;
            default:
              i[r] = z(a, p);
          }
        },
      );
    }
  }
  return i;
}
function G(e, t) {
  var r = [];
  if (e && 'array' === e.type) {
    var i = t;
    a(i) && a(e.default) && typeof i != typeof e.default && (i = void 0);
    var p = a(i) ? i : e.default;
    if ('array' === e.type)
      if ($(p))
        p.map(function (t) {
          r.push(C(e.items, t));
        });
      else {
        var o = C(e.items, p);
        r.push(o);
      }
    else r = a(p) ? p : [];
  }
  return r;
}
function I(e, t) {
  return 'object' === e.type ? C(e, t) : 'array' === e.type ? G(e, t) : z(e, t);
}
var K = h;
function L(e, t) {
  var r = t || [];
  if (e && '{}' !== JSON.stringify(e))
    if (J(e))
      if (
        e.type &&
        'remote' === e.type &&
        e.config &&
        J(e.config) &&
        e.config.dataName &&
        a(e.localFilter) &&
        a(e.data)
      ) {
        var i = e.config.body;
        if (i && !J(i))
          try {
            i = JSON.parse(i);
          } catch (e) {
            i = {};
          }
        r.push({ id: e.config.id, dataName: e.config.dataName, body: i });
      } else {
        Object.keys(e).map(function (t) {
          L(e[t], r);
        });
      }
    else
      $(e) &&
        e.map(function (e) {
          L(e, r);
        });
  return r;
}
function M(e, t) {
  var r = t || 'data';
  return (
    e.split('-').map(function (e) {
      r = /^\d+$/.test(e) ? r + '[' + e + ']' : r + '.' + e;
    }),
    r
  );
}
function P(e, t) {
  var r = [];
  J(e)
    ? Object.keys(e).map(function (i) {
        var a = e[i],
          p = t ? t + '-' + i : i;
        J(a) || $(a)
          ? r.push({ title: i, value: p, key: p, children: P(a, p) })
          : r.push({ title: i, value: p, key: p });
      })
    : $(e) &&
      e.map(function (e, i) {
        var a = i.toString(),
          p = t ? t + '-' + i : a;
        J(e) || $(e)
          ? r.push({ title: a, value: p, key: p, children: P(e, p) })
          : r.push({ title: a, value: p, key: p });
      });
  return r;
}
var Q = {
  array: 'array',
  boolean: 'boolean',
  'box-style': 'object',
  codearea: 'string',
  color: 'string',
  datasource: 'object',
  date: 'string',
  'date-time': 'string',
  'dynamic-data': 'object',
  event: 'object',
  'func-body': 'string',
  htmlarea: 'string',
  image: 'string',
  input: 'string',
  json: 'string',
  number: 'number',
  object: 'object',
  quantity: 'string',
  radio: 'string',
  select: 'array',
  'single-select': 'string',
  textarea: 'string',
  'text-editor': 'string',
  time: 'string',
  url: 'string',
};
function V(e) {
  return Q[e] || e;
}
function X(e, t) {
  Q[e]
    ? console.warn('当前已经存在' + e + '(' + Q[e] + ')，暂时不支持覆盖。')
    : (Q[e] = t);
}
function Y(e) {
  var t = e.split('-');
  return t.pop(), t.join('-');
}
function _(e) {
  var t = e.split('-'),
    r = t.pop();
  return [t.join('-'), r];
}
function ee(e) {
  var t = !0;
  if (!e) return t;
  var r = e.type;
  return (
    (('object' === r &&
      e.properties &&
      e.propertyOrder &&
      e.propertyOrder.length > 0) ||
      ('array' === r &&
        e.items &&
        e.items.properties &&
        e.items.propertyOrder &&
        e.items.propertyOrder.length > 0) ||
      (e.type && 'array' !== e.type && 'object' !== e.type) ||
      e.type) &&
      (t = !1),
    t
  );
}
function te(e) {
  var t = !1,
    r = e.lastUpdateTime,
    i = new Date('2024-10-05T00:01:00.691Z').getTime();
  return r && new Date(r).getTime() >= i && (t = !0), t;
}
function re(e) {
  var t = !1;
  return 'object' === V(e.type) && (t = !0), t;
}
function ie(e) {
  var t = !0;
  return (
    'object' === e.type && e.propertyOrder && e.properties
      ? e.propertyOrder.map(function (r) {
          var i = e.properties[r];
          ('object' === e.type && i.propertyOrder && i.properties) || (t = !1);
        })
      : (t = !1),
    t
  );
}
function ae(e, t) {
  var r = e.split('-'),
    i = t.split('-');
  return r.pop(), i.pop(), r.join('-') === i.join('-');
}
function pe(e, t) {
  for (
    var r = e.split('-'),
      i = t.split('-'),
      a = 'before',
      p = 0,
      o = (r.length > i.length ? i : r).length;
    p < o;
    p += 1
  ) {
    Number(r[p]) > Number(i[p]) && (a = 'after');
  }
  return a;
}
function oe(e) {
  var t = e.split('-');
  return t.pop(), t.join('-');
}
function ne(e) {
  var t = e.split('-'),
    r = t.pop(),
    i = Number(r) + 1;
  return t.push('' + i), t.join('-');
}
function le(e) {
  var t = e.split('-'),
    r = t.pop();
  return [t.join('-'), r];
}
function ue(e) {
  var t = e.split('-'),
    r = t.pop();
  return t.push(Number(r) - 1), t.join('-');
}
function se(e) {
  var t = e.split('-'),
    r = t.pop();
  return t.push(Number(r) + 1), t.join('-');
}
var ce = [
  'key',
  'enum',
  'enumextra',
  'items',
  'input',
  'boolean',
  'number',
  'color',
  'url',
  'textarea',
  'text-editor',
  'radio',
  'single-select',
  'checkboxes',
  'date',
  'date-time',
  'time',
  'json',
  'codearea',
  'htmlarea',
  'quantity',
  'box-style',
  'dynamic-data',
  'datasource',
  'event',
  'array',
  'object',
];
export {
  x as DataSourceTypeList,
  O as EventTypeDataList,
  ce as KeyWordList,
  h as TypeDataList,
  M as dataRoute2dataPath,
  L as dynamicDataAnalyzer,
  pe as getCurPosition,
  V as getExpectType,
  p as getJsonDataByKeyRoute,
  ne as getNextIndexRoute,
  oe as getParentIndexRoute,
  le as getParentIndexRoute_CurIndex,
  Y as getParentKeyRoute,
  _ as getParentKeyRoute_CurKey,
  o as getSchemaByIndexRoute,
  n as getSchemaByKeyRoute,
  a as hasProperties,
  l as indexRoute2keyRoute,
  $ as isArray,
  N as isBoolean,
  A as isColor,
  re as isContainerSchema,
  F as isDateStr,
  D as isDateTimeStr,
  ee as isEmptySchema,
  i as isEqual,
  E as isFunction,
  te as isNewSchemaData,
  S as isNumber,
  J as isObject,
  T as isQuantity,
  ae as isSameParent,
  w as isSelect,
  k as isString,
  ie as isStructuredSchema,
  R as isTimeStr,
  q as isURL,
  B as json2schema,
  P as json2treeData,
  u as keyRoute2indexRoute,
  U as metaElemAnalyzer,
  se as moveBackward,
  ue as moveForward,
  r as objClone,
  Z as oldSchemaToNewSchema,
  W as oldSchemaToNewSchemaV1,
  X as registerExpectType,
  I as schema2json,
  K as schemaMetaList,
};
