import { cloneDeep as e, isEqual as t, truncate as r } from 'lodash';
function i(t) {
  return e(t);
}
function a(e, r) {
  return t(e, r);
}
function o(e) {
  var t = !1;
  return null != e && (t = !0), t;
}
function p(e, t) {
  return r(e, t);
}
function n(e, t, r) {
  var a = t;
  if ((r && (a = i(t)), e))
    for (var o = e.split('-'), p = 0, n = o.length; p < n; p++) {
      var l = o[p];
      l && (a = a && a[l]);
    }
  return a;
}
function l(e, t, r) {
  var a = t;
  if ((r && (a = i(t)), e))
    for (var o = e.split('-'), p = 0, n = o.length; p < n; p++) {
      var l = o[p];
      if (
        '0' !== l ||
        ('array' !== a.type &&
          'radio' !== a.type &&
          'select' !== a.type &&
          'checkboxes' !== a.type) ||
        (!a.options && !a.items)
      ) {
        if (l) {
          var s = '0';
          if (a.propertyOrder) s = a.propertyOrder[l];
          else if (a.properties) {
            s = Object.keys(a.properties)[l];
          }
          a = a.properties[s];
        }
      } else a = a.options || a.items;
    }
  return a;
}
function s(e, t, r) {
  var a = t;
  if ((r && (a = i(t)), e && a))
    for (var o = e.split('-'), p = 0, n = o.length; p < n; p++) {
      var l = o[p];
      l && a.properties && (a = a.properties[l]);
    }
  return a;
}
function u(e, t) {
  for (var r = t, i = '', a = e.split('-'), o = 0, p = a.length; o < p; o++) {
    var n = a[o];
    if ('0' === n && r.items) (r = r.items), (i = i ? i + '-items' : 'items');
    else if ('0' === n && r.options)
      (r = r.options), (i = i ? i + '-options' : 'options');
    else if (n) {
      var l = '0';
      if (r.propertyOrder) l = r.propertyOrder[n];
      else if (r.properties) {
        l = Object.keys(r.properties)[n];
      }
      (r = r.properties[l]), (i = i ? i + '-' + l : l);
    }
  }
  return i;
}
function c(e, t) {
  for (var r = t, i = '', a = e.split('-'), o = 0, p = a.length; o < p; o++) {
    var n = a[o];
    if (n) {
      var l = -1;
      if (r.propertyOrder)
        (l = r.propertyOrder.indexOf(n)), (r = r.properties[n]);
      else if (r.properties) {
        (l = Object.keys(r.properties).indexOf(n)), (r = r.properties[n]);
      } else
        r.items
          ? ((l = 0), (r = r.items))
          : r.options && ((l = 0), (r = r.options));
      i = i ? i + '-' + l : l.toString();
    }
  }
  return i;
}
var d,
  y,
  f = {
    type: 'event',
    title: '事件',
    isContainer: !1,
    properties: {
      type: {
        default: 'emit',
        type: 'select',
        options: [
          { label: 'on', value: 'on' },
          { label: 'emit', value: 'emit' },
        ],
        title: '事件类型',
      },
      trigger: {
        type: 'input',
        default: 'eventName',
        title: '触发事件',
        description: '用于输入触发事件的名称',
        placeholder: '请输入触发事件的名称',
      },
      eventData: {
        title: '事件数据',
        type: 'json',
        default: '{}',
        description: '传递给触发事件的数据对象',
      },
    },
    propertyOrder: ['type', 'trigger', 'eventData'],
  },
  m = {
    type: 'datasource',
    title: '数据源',
    isContainer: !1,
    properties: {
      type: {
        default: 'local',
        type: 'select',
        options: [
          { label: '本地数据', value: 'local' },
          { label: '接口数据', value: 'remote' },
        ],
        title: '数据源类型',
      },
      data: {
        title: '本地json数据',
        placeholder: '请输入静态json数据',
        type: 'json',
        default: '{}',
        description: '用于设置本地的静态json数据',
        isRequired: !0,
      },
      filter: {
        title: '过滤器',
        type: 'codearea',
        default: '() => {}',
        description: '用于定义过滤当前数据的函数',
        isRequired: !0,
      },
    },
    propertyOrder: ['type', 'data', 'filter'],
  },
  v =
    (((d = { type: 'object' }).type = 'datasource'),
    (d.title = '数据源'),
    (d.isContainer = !1),
    (d.properties = {
      type: {
        type: 'select',
        default: 'remote',
        options: [
          { label: '本地数据', value: 'local' },
          { label: '接口数据', value: 'remote' },
        ],
        title: '数据源类型',
      },
      data: {
        type: 'url',
        title: '远程json数据',
        placeholder: '请输入远程json数据源地址',
        default: 'http://xxx',
        isRequired: !0,
        description: '用于设置获取元素数据的请求地址',
      },
      filter: {
        type: 'codearea',
        title: '过滤器',
        default: '() => {}',
        description: '用于定义过滤当前数据的函数',
        isRequired: !0,
      },
    }),
    (d.propertyOrder = ['type', 'data', 'filter']),
    d),
  b = {
    type: 'local',
    config: { dataName: '', body: {}, filter: 'return data;' },
    data: '{}',
    localFilter: 'return data;',
  },
  g = {
    jsonschema: {
      type: 'object',
      title: 'jsonSchemaObject',
      properties: {
        func: {
          type: 'object',
          title: '功能设置',
          isContainer: !1,
          properties: {
            a: {
              title: '单文本框',
              type: 'input',
              default: '',
              description: '',
              placeholder: '',
              isRequired: !1,
            },
          },
          propertyOrder: ['a'],
        },
        style: {
          type: 'object',
          title: '样式设置',
          isContainer: !1,
          properties: {
            b: {
              title: '单文本框',
              type: 'input',
              default: '',
              description: '',
              placeholder: '',
            },
          },
          propertyOrder: ['b'],
        },
        data: {
          type: 'data',
          title: '数据设置',
          isContainer: !1,
          properties: {
            c: {
              title: '单文本框',
              type: 'input',
              default: '',
              description: '',
              placeholder: '',
              isRequired: !1,
            },
          },
          propertyOrder: ['c'],
        },
      },
      propertyOrder: ['func', 'style', 'data'],
    },
    input: {
      title: '单文本框',
      type: 'input',
      default: '',
      description: '',
      placeholder: '',
    },
    boolean: { type: 'boolean', title: '布尔值', default: !1, description: '' },
    object: {
      type: 'object',
      title: '对象Object',
      description: '',
      properties: {
        a: {
          type: 'input',
          title: '单文本框',
          default: '',
          description: '',
          placeholder: '',
        },
      },
      propertyOrder: ['a'],
    },
    array: {
      type: 'array',
      title: '数组Array',
      description: '',
      items: {
        type: 'object',
        title: '数组项',
        description: '',
        properties: {
          name: {
            type: 'input',
            title: '名字',
            default: '',
            description: '',
            placeholder: '',
          },
        },
        propertyOrder: ['name'],
      },
    },
    'empty-array': {
      type: 'array',
      title: '数组Array',
      description: '',
      items: {
        type: 'object',
        title: '数组项',
        description: '',
        properties: {},
      },
    },
    'empty-object': {
      type: 'object',
      title: '对象Object',
      description: '',
      properties: {},
    },
    url: {
      type: 'url',
      title: '链接地址url',
      default: '',
      description: '',
      placeholder: '',
    },
    textarea: {
      type: 'textarea',
      title: '多行文本框',
      default: '',
      description: '',
      placeholder: '',
    },
    color: {
      type: 'color',
      title: '颜色color',
      default: '#ffffff',
      description: '',
    },
    image: {
      title: '图片',
      type: 'image',
      default: '',
      description: '上传图片',
      imgWidth: 200,
      imgHeight: 200,
      imgRatioReadOnly: !0,
    },
    number: {
      type: 'number',
      title: '数量number',
      default: 1,
      minimum: 0,
      maximum: 1e3,
      description: '',
    },
    json: { title: 'json数据', type: 'json', default: '{}', description: '' },
    codearea: {
      type: 'codearea',
      title: '函数类型',
      placeholder: '请输入函数方法',
      default: 'function func() { console.log("hello, world!"); }',
      description: '用于定义函数方法',
    },
    htmlarea: {
      title: '富文本',
      type: 'htmlarea',
      placeholder: '请输入html代码片段',
      default: '<p>hello,world!</p>',
      description: '用于放置html代码片段',
    },
    'text-editor': {
      type: 'text-editor',
      title: '富文本',
      default: '',
      description: '',
      placeholder: '',
    },
    date: {
      type: 'date',
      title: '日期Date',
      default: '',
      description: '',
      placeholder: '',
    },
    'date-time': {
      type: 'date-time',
      title: '日期时间',
      default: '',
      description: '',
      placeholder: '',
    },
    time: {
      type: 'time',
      title: '时间Time',
      default: '',
      description: '',
      placeholder: '',
    },
    quantity: {
      type: 'quantity',
      title: '单位计量',
      isContainer: !1,
      properties: {
        unit: {
          type: 'number',
          title: '单位数值',
          default: 50,
          minimum: 0,
          maximum: 1e3,
          description: '',
        },
        quantity: {
          type: 'select',
          default: 'px',
          options: [
            { label: 'px', value: 'px' },
            { label: 'rem', value: 'rem' },
            { label: 'em', value: 'em' },
            { label: '%', value: '%' },
          ],
          title: '单位类型',
        },
      },
      propertyOrder: ['unit', 'quantity'],
    },
    'box-style': {
      type: 'box-style',
      title: '盒子模型',
      isContainer: !1,
      properties: {
        unit: {
          title: '单位数值',
          type: 'input',
          default: '0',
          description: '',
        },
        quantity: {
          type: 'select',
          default: 'px',
          options: [
            { label: 'px', value: 'px' },
            { label: 'rem', value: 'rem' },
            { label: 'em', value: 'em' },
            { label: '%', value: '%' },
          ],
          title: '单位类型',
        },
      },
      propertyOrder: ['unit', 'quantity'],
    },
    radio: {
      type: 'radio',
      title: '单选',
      options: [
        { label: '选项a', value: 'a' },
        { label: '选项b', value: 'b' },
        { label: '选项c', value: 'c' },
      ],
      default: 'a',
      description: '',
    },
    select: {
      type: 'select',
      title: '下拉选择',
      options: [
        { label: '选项a', value: 'a' },
        { label: '选项b', value: 'b' },
        { label: '选项c', value: 'c' },
      ],
      default: 'a',
      description: '',
    },
    checkboxes: {
      type: 'checkboxes',
      title: '多选',
      options: [
        { label: '选项a', value: 'a' },
        { label: '选项b', value: 'b' },
        { label: '选项c', value: 'c' },
      ],
      default: ['a'],
      description: '',
    },
    'dynamic-data': {
      type: 'dynamic-data',
      title: '动态数据源',
      isContainer: !1,
      properties: {
        type: {
          default: 'local',
          type: 'select',
          options: [
            { label: '本地数据', value: 'local' },
            { label: '接口数据', value: 'remote' },
          ],
          title: '数据类型',
        },
        config: {
          title: '接口配置',
          type: 'object',
          description: '用于存放接口的配置数据(url、请求参数等)',
          isRequired: !0,
          properties: {
            dataName: {
              default: 'local',
              type: 'select',
              options: [
                { label: '本地数据', value: 'local' },
                { label: '接口数据', value: 'remote' },
              ],
              title: '数据类型',
            },
            body: {
              type: 'object',
              title: '请求参数配置',
              description: '用于配置当前接口的请求参数数值',
              isRequired: !0,
            },
            filter: {
              title: '过滤器函数体',
              type: 'codearea',
              default: 'return data;',
              description: '用于定义过滤接口数据',
              isRequired: !0,
            },
          },
          propertyOrder: ['dataName', 'body', 'filter'],
        },
        data: {
          title: '数据内容',
          type: 'json',
          default: '{}',
          description: '用于存放DynamicData的数据内容',
          isRequired: !0,
        },
        localFilter: {
          title: '过滤器',
          type: 'codearea',
          default: 'return data;',
          description: '用于定义过滤本地数据',
          isRequired: !0,
        },
      },
      propertyOrder: ['type', 'config', 'data', 'localFilter'],
    },
    datasource: m,
    event: f,
    'dynamic-config': {
      type: 'dynamic-config',
      title: '动态配置',
      description: '',
      isContainer: !1,
      properties: {
        type: {
          type: 'select',
          title: '数据来源',
          options: [
            { label: '模板直接设置', value: 'DevDefaults' },
            { label: 'mp后台配置', value: 'ContentStaticConfig' },
            { label: '内容Meta数据', value: 'Content' },
            { label: '全局配置数据', value: 'RuntimeConst' },
            { label: '资源中心配置', value: 'ResourceCenter' },
          ],
          default: 'DevDefaults',
          isConditionProp: !0,
          description:
            '目前支持的数据来源包括： 1)模版直接设置:在模版配置直接生效，支持直接输入或图片上传。 2)mp后台配置:选择mp后台配置后，属性会出现在mp后台中，支持属性描述的输入。 3)内容meta数据:支持内容meta数据的获取，页面meta数据。 4)全局配置数据:目前支持的全局配置包括：全局Tab配置及主题包配置。相关属性会挂载至：window.globalConst',
        },
        value: {
          title: '数据值',
          type: 'input',
          default: '',
          description: '',
          placeholder: '',
        },
        description: {
          title: '属性名称',
          type: 'input',
          default: '',
          description: '',
          placeholder: '',
        },
        valueType: {
          type: 'radio',
          title: '配置方式',
          options: [
            { label: '填写', value: 'string' },
            { label: '选择', value: 'select' },
          ],
          default: 'string',
          isConditionProp: !0,
          description: '',
        },
        range: {
          type: 'select',
          title: '可选项',
          multiple: !0,
          options: [],
          description: '这里会使用value中的配置选项作为options',
        },
      },
      propertyOrder: ['type', 'value', 'description', 'valueType', 'range'],
      showCodeViewBtn: !1,
    },
  },
  j = {
    on: {
      type: 'event',
      title: '事件',
      isContainer: !1,
      properties: {
        type: {
          default: 'on',
          type: 'select',
          options: [
            { label: 'on', value: 'on' },
            { label: 'emit', value: 'emit' },
          ],
          title: '事件类型',
        },
        register: {
          type: 'input',
          default: 'eventName',
          title: '注册事件',
          description: '用于输入注册事件的名称',
          placeholder: '请输入注册事件的名称',
        },
        actionFunc: {
          title: '执行函数',
          type: 'codearea',
          default: '() => {}',
          description: '',
        },
      },
      propertyOrder: ['type', 'register', 'actionFunc'],
    },
    emit: f,
  },
  h = { local: m, remote: v };
function O(e) {
  return /^http[s]?:\/\/.*/.test(e);
}
function x(e) {
  return 'String' === Object.prototype.toString.call(e).slice(8, -1);
}
function q(e) {
  return (
    'number' == typeof e ||
    '[object Number]' === Object.prototype.toString.call(e)
  );
}
function k(e) {
  return 'Boolean' === Object.prototype.toString.call(e).slice(8, -1);
}
function N(e) {
  return /^\d{4}-\d{2}-\d{2}$/.test(e);
}
function C(e) {
  return (
    /^\d{4}-\d{2}-\d{2}\s\d{2}:\d{2}$/.test(e) ||
    /^\d{4}-\d{2}-\d{2}\s\d{2}:\d{2}:\d{2}$/.test(e)
  );
}
function D(e) {
  return /^\d{2}:\d{2}:\d{2}$/.test(e) || /^\d{2}:\d{2}$/.test(e);
}
function F(e) {
  var t = !1;
  return (
    'Array' === Object.prototype.toString.call(e).slice(8, -1) && (t = !0), t
  );
}
function S(e) {
  if (!F(e)) return !1;
  for (var t = 0, r = e.length; t < r; t++) {
    if (!x(e[t])) return !1;
  }
  return !0;
}
function R(e) {
  var t = !1;
  return (
    'Object' === Object.prototype.toString.call(e).slice(8, -1) && (t = !0), t
  );
}
function w(e) {
  var t = !1;
  return g.quantity.properties.quantity.enum.indexOf(e) >= 0 && (t = !0), t;
}
function T(e) {
  return /^#[0-9a-f]{6}$/.test(e) || /^#[0-9a-f]{3}$/.test(e);
}
function $(e) {
  var t = !1;
  return (
    'Function' === Object.prototype.toString.call(e).slice(8, -1) && (t = !0), t
  );
}
function J(e) {
  var t = {};
  return (
    (t =
      e && R(e)
        ? (function (e) {
            var t;
            if (R(e)) {
              var r = Object.keys(e);
              e.data && e.filter && 2 === r.length
                ? (t = F(e.data) || R(e.data) ? i(h.local) : i(h.remote))
                : e.trigger && e.eventData && 2 === r.length
                  ? (t = i(j.emit))
                  : e.register && e.actionFunc && 2 === r.length
                    ? (t = i(j.on))
                    : e.quantity && w(e.quantity) && 2 === r.length
                      ? (t = i(g.quantity))
                      : ((t = i(g['empty-object'])),
                        Object.keys(e).map(function (r) {
                          var i = e[r];
                          t.properties[r] = J(i);
                        }));
            }
            return t;
          })(e)
        : e && F(e)
          ? (function (e) {
              var t;
              if (e && F(e))
                if (S(e)) {
                  (t = i(g.select)).items.enum = e;
                  var r = t.items.enumextra.length,
                    a = e.length;
                  if (a > r)
                    for (var o = r, p = a; o < p; o++)
                      t.items.enumextra.push('选项' + e(o));
                } else {
                  t = i(g['empty-array']);
                  var n = J(e[0]);
                  t.items.properties = n.properties;
                }
              return t;
            })(e)
          : (function (e) {
              var t = '';
              if (k(e)) t = i(g.boolean);
              else if (q(e)) t = i(g.number);
              else if (O(e)) t = i(g.url);
              else if (N(e)) t = i(g.date);
              else if (C(e)) t = i(g['date-time']);
              else if (D(e)) t = i(g.time);
              else if (T(e)) t = i(g.color);
              else
                try {
                  t = q(JSON.parse(e)) ? i(g.input) : i(g.json);
                } catch (r) {
                  t = e && e.length > 30 ? i(g.textarea) : i(g.input);
                }
              return t;
            })(e)),
    t
  );
}
function E(e, t) {
  var r = t || {};
  if (R(e) && 'object' === getExpectType(e.type) && e.properties) {
    (e.propertyOrder ? e.propertyOrder : Object.keys(e.properties)).map(
      function (t) {
        var i = e.properties[t];
        r = A(i, r);
      },
    );
  }
  return r;
}
function A(e, t) {
  var r = !t,
    i = t || {};
  if (e && '{}' !== JSON.stringify(e)) {
    var a = e.type;
    'object' === a || 'func' === a || 'style' === a || 'data' === a
      ? (!r && i.object ? (i.object += 1) : r || (i.object = 1), (i = E(e, i)))
      : 'array' === a
        ? (!r && i.array ? (i.array += 1) : r || (i.array = 1),
          (i = E((e = e.items), i)))
        : !r && i[a]
          ? (i[a] += 1)
          : r || (i[a] = 1);
  }
  return i;
}
function B(e) {
  var t = i(e);
  if (
    (!t.title && t.description && (t.title = t.description),
    t.type || (t.type = t.format),
    ('quantity' !== t.type &&
      'array' !== t.type &&
      'datasource' !== t.type &&
      'event' !== t.type &&
      'object' !== t.type) ||
      !o(t.default) ||
      delete t.default,
    'radio' === t.type &&
      ((t.type = 'string'),
      t.enum &&
        t.enumextra &&
        ((t.items = {
          type: 'string',
          enum: i(t.enum),
          enumextra: i(t.enumextra),
        }),
        delete t.enum,
        delete t.enumextra)),
    'quantity' === t.type)
  ) {
    var r = t.properties,
      a = i(g.quantity);
    if (r.quantity && R(r.quantity) && r.quantity.default) {
      var p = r.quantity.default;
      a.properties.quantity.default = 'percent' === p ? '%' : p;
    }
    t = a;
  }
  if ('datasource' === t.type) {
    var n = t.properties,
      l = n.type && n.type.default,
      s = n.data && n.data.default,
      u = n.filter && n.filter.default;
    'local' === l
      ? ((t = i(h.local)).properties.data.default = s ? i(s) : '{}')
      : ((t = i(h.remote)).properties.data.default = s ? i(s) : 'http://xxx'),
      (t.properties.filter.default = u ? i(u) : '() => {}');
  }
  if ('event' === t.type) {
    var c = t.properties,
      d = c.type && c.type.default;
    if ('in' === d || 'on' === d) {
      var y = (c.filter && c.filter.default) || '() => {}';
      (t = i(j.on)),
        c.actionFunc &&
          R(c.actionFunc) &&
          (t.properties.actionFunc.default = c.actionFunc.default || i(y));
    } else {
      var f = (c.filter && c.filter.default) || '{}';
      (t = i(j.emit)),
        c.eventData &&
          R(c.eventData) &&
          (t.properties.eventData.default = c.eventData.default || i(f));
    }
  }
  return (
    t.properties &&
      (t.propertyOrder || (t.propertyOrder = Object.keys(t.properties)),
      t.propertyOrder.map(function (e) {
        t.properties[e] = P(t.properties[e]);
      })),
    t.items && (t.items = P(t.items)),
    t
  );
}
function P(e) {
  var t = i(e);
  return (
    t.required || delete t.required,
    t.type && t.type && (t.type = t.type),
    ('quantity' !== t.type &&
      'array' !== t.type &&
      'datasource' !== t.type &&
      'event' !== t.type &&
      'object' !== t.type) ||
      !o(t.default) ||
      delete t.default,
    ('radio' !== t.type && 'checkboxes' !== t.type && 'select' !== t.type) ||
      (t.items &&
        t.items.enum &&
        t.items.enumextra &&
        ((t.options = []),
        t.items.enum.forEach(function (e, r) {
          t.options.push({ label: t.items.enumextra[r] || e, value: e });
        }),
        delete t.items)),
    t.properties &&
      (t.propertyOrder || (t.propertyOrder = Object.keys(t.properties)),
      t.propertyOrder.map(function (e) {
        t.properties[e] = P(t.properties[e]);
      })),
    'array' === t.type && t.items && (t.items = P(t.items)),
    t
  );
}
var H =
  (((y = {
    array: 'array',
    boolean: 'boolean',
    'box-style': 'object',
    codearea: 'string',
    color: 'string',
    datasource: 'object',
    date: 'string',
    'date-time': 'string',
    'dynamic-data': 'object',
    event: 'object',
    'func-body': 'string',
    htmlarea: 'string',
    image: 'string',
    input: 'string',
    json: 'string',
    number: 'number',
    object: 'object',
    quantity: 'object',
    radio: 'string',
    select: 'array',
  }).select = 'string'),
  (y.textarea = 'string'),
  (y['text-editor'] = 'string'),
  (y.time = 'string'),
  (y.url = 'string'),
  (y['dynamic-config'] = 'object'),
  y);
function M(e) {
  return H[e] || e;
}
function U(e, t) {
  H[e]
    ? console.warn('当前已经存在' + e + '(' + H[e] + ')，暂时不支持覆盖。')
    : (H[e] = t);
}
function V(e) {
  var t = !0;
  if (!e) return t;
  var r = e.type;
  return (
    (('object' === r &&
      e.properties &&
      e.propertyOrder &&
      e.propertyOrder.length > 0) ||
      ('array' === r &&
        e.items &&
        e.items.properties &&
        e.items.propertyOrder &&
        e.items.propertyOrder.length > 0) ||
      (e.type && 'array' !== e.type && 'object' !== e.type) ||
      e.type) &&
      (t = !1),
    t
  );
}
function W(e) {
  var t = !1,
    r = e.lastUpdateTime,
    i = new Date('2024-10-05T00:01:00.691Z').getTime();
  return r && new Date(r).getTime() >= i && (t = !0), t;
}
function Z(e) {
  var t = !1,
    r = M(e.type),
    i = void 0 === e.isContainer || e.isContainer;
  return 'object' === r && i && (t = !0), t;
}
function z(e) {
  var t = !0;
  return (
    'object' === e.type && e.propertyOrder && e.properties
      ? e.propertyOrder.map(function (r) {
          var i = e.properties[r];
          ('object' === e.type && i.propertyOrder && i.properties) || (t = !1);
        })
      : (t = !1),
    t
  );
}
function G(e, t) {
  var r = e.split('-'),
    i = t.split('-');
  return r.pop(), i.pop(), r.join('-') === i.join('-');
}
function I(e, t) {
  for (
    var r = e.split('-'),
      i = t.split('-'),
      a = 'before',
      o = 0,
      p = (r.length > i.length ? i : r).length;
    o < p;
    o += 1
  ) {
    Number(r[o]) > Number(i[o]) && (a = 'after');
  }
  return a;
}
function K(e) {
  var t = e.split('-');
  return t.pop(), t.join('-');
}
function L(e) {
  var t = e.split('-'),
    r = t.pop(),
    i = Number(r) + 1;
  return t.push('' + i), t.join('-');
}
function Q(e) {
  var t = e.split('-'),
    r = t.pop();
  return [t.join('-'), r];
}
function X(e) {
  var t = e.split('-'),
    r = t.pop();
  return t.push(Number(r) - 1), t.join('-');
}
function Y(e) {
  var t = e.split('-'),
    r = t.pop();
  return t.push(Number(r) + 1), t.join('-');
}
function _(e, t) {
  var r = '',
    i = !1;
  return (
    e.options && e.options[0] && ((r = e.options[0].value), (i = !0)),
    (t || e.multiple) && (r = i ? [r] : []),
    r
  );
}
function ee(e, t) {
  var r = '',
    i = t;
  o(i) && o(e.default) && typeof i != typeof e.default && (i = void 0);
  var a = o(i) ? i : e.default;
  switch (e.type) {
    case 'select':
    case 'radio':
      r = a || _(e);
      break;
    case 'checkboxes':
      r = a || _(e, !0);
      break;
    case 'color':
      ('#fff' !== a && '#FFF' !== a) || (a = '#ffffff'),
        (r = o(a) ? a : '#ffffff');
      break;
    case 'boolean':
      r = !!o(a) && a;
      break;
    case 'number':
      r = o(a) ? a : 1;
      break;
    case 'json':
      var p = '';
      if (R(a) || F(a)) p = a;
      else if ($(a) || '' === a) p = {};
      else
        try {
          p = JSON.parse(a);
        } catch (e) {
          p = {};
        }
      r = p;
      break;
    default:
      r =
        'input' === e.type && '0' === e.default
          ? a || e.default
          : o(a)
            ? a
            : '';
  }
  return r;
}
function te(e, t) {
  var r = {},
    a = e.type;
  if (R(e) && 'object' === M(e.type)) {
    var p = e,
      n = t;
    o(n) && o(p.default) && typeof n != typeof p.default && (n = void 0);
    var l = o(n) ? n : p.default;
    if ('dynamic-data' === a)
      (r = i(b)),
        l && R(l) && '{}' !== JSON.stringify(l) && (r = Object.assign(r, l));
    else if ('datasource' === a)
      p.properties &&
      p.properties.type &&
      p.properties.type.default &&
      'local' === p.properties.type.default
        ? ((r = { data: '{}', filter: '() => {}' }),
          l && l.data && (r.data = l.data),
          l && l.filter && (r.filter = l.filter),
          'http://xxx' === r.data && (r.data = '{}'))
        : ((r = { data: 'http://xxx', filter: '() => {}' }),
          l && l.data && (r.data = l.data),
          l && l.filter && (r.filter = l.filter),
          '{}' === r.data && (r.data = 'http://xxx'));
    else if ('event' === a)
      p.properties &&
      p.properties.type &&
      p.properties.type.default &&
      'emit' === p.properties.type.default
        ? l && 'out' === l.type
          ? (r = { trigger: (l && l.filter) || 'eventName', eventData: '{}' })
          : ((r = { trigger: 'eventName', eventData: '{}' }),
            l && l.trigger && (r.trigger = l.trigger),
            l && l.eventData && (r.eventData = l.eventData))
        : l && 'in' === l.type
          ? (r = {
              register: 'eventName',
              actionFunc: (l && l.filter) || '() => {}',
            })
          : ((r = { register: 'eventName', actionFunc: '() => {}' }),
            l && l.register && (r.register = l.register),
            l && l.actionFunc && (r.actionFunc = l.actionFunc));
    else if (e.properties) {
      (e.propertyOrder ? e.propertyOrder : Object.keys(e.properties)).map(
        function (i) {
          var a = e.properties[i],
            o = t && t[i];
          switch (M(a.type)) {
            case 'array':
              r[i] = re(a, o);
              break;
            case 'object':
              r[i] = te(a, o);
              break;
            default:
              r[i] = ee(a, o);
          }
        },
      );
    }
  }
  return r;
}
function re(e, t) {
  var r = [];
  if (e && 'array' === M(e.type)) {
    var i = t;
    o(i) && o(e.default) && typeof i != typeof e.default && (i = void 0);
    var a = o(i) ? i : e.default;
    if ('array' === M(e.type))
      if (F(a))
        a.map(function (t) {
          r.push(te(e.items, t));
        });
      else {
        var p = te(e.items, a);
        r.push(p);
      }
    else r = o(a) ? a : [];
  }
  return r;
}
function ie(e, t) {
  return 'object' === M(e.type)
    ? te(e, t)
    : 'array' === M(e.type)
      ? re(e, t)
      : ee(e, t);
}
var ae = g;
function oe(e, t) {
  var r = t || [];
  if (e && '{}' !== JSON.stringify(e))
    if (R(e))
      if (
        e.type &&
        'remote' === e.type &&
        e.config &&
        R(e.config) &&
        e.config.dataName &&
        o(e.localFilter) &&
        o(e.data)
      ) {
        var i = e.config.body;
        if (i && !R(i))
          try {
            i = JSON.parse(i);
          } catch (e) {
            i = {};
          }
        r.push({ id: e.config.id, dataName: e.config.dataName, body: i });
      } else {
        Object.keys(e).map(function (t) {
          oe(e[t], r);
        });
      }
    else
      F(e) &&
        e.map(function (e) {
          oe(e, r);
        });
  return r;
}
function pe(e, t) {
  var r = t || 'data';
  return (
    e.split('-').map(function (e) {
      r = /^\d+$/.test(e) ? r + '[' + e + ']' : r + '.' + e;
    }),
    r
  );
}
function ne(e, t) {
  var r = [];
  R(e)
    ? Object.keys(e).map(function (i) {
        var a = e[i],
          o = t ? t + '-' + i : i;
        R(a) || F(a)
          ? r.push({ title: i, value: o, key: o, children: ne(a, o) })
          : r.push({ title: i, value: o, key: o });
      })
    : F(e) &&
      e.map(function (e, i) {
        var a = i.toString(),
          o = t ? t + '-' + i : a;
        R(e) || F(e)
          ? r.push({ title: a, value: o, key: o, children: ne(e, o) })
          : r.push({ title: a, value: o, key: o });
      });
  return r;
}
function le(e) {
  var t = e.split('-');
  return t.pop(), t.join('-');
}
function se(e) {
  var t = e.split('-'),
    r = t.pop();
  return [t.join('-'), r];
}
var ue = [
  'key',
  'enum',
  'enumextra',
  'items',
  'input',
  'boolean',
  'number',
  'color',
  'url',
  'textarea',
  'text-editor',
  'radio',
  'select',
  'checkboxes',
  'date',
  'date-time',
  'time',
  'json',
  'codearea',
  'htmlarea',
  'quantity',
  'box-style',
  'dynamic-data',
  'datasource',
  'event',
  'array',
  'object',
];
export {
  h as DataSourceTypeList,
  j as EventTypeDataList,
  ue as KeyWordList,
  g as TypeDataList,
  pe as dataRoute2dataPath,
  oe as dynamicDataAnalyzer,
  I as getCurPosition,
  _ as getDefaultOptionVal,
  M as getExpectType,
  n as getJsonDataByKeyRoute,
  L as getNextIndexRoute,
  K as getParentIndexRoute,
  Q as getParentIndexRoute_CurIndex,
  le as getParentKeyRoute,
  se as getParentKeyRoute_CurKey,
  l as getSchemaByIndexRoute,
  s as getSchemaByKeyRoute,
  o as hasProperties,
  u as indexRoute2keyRoute,
  F as isArray,
  k as isBoolean,
  T as isColor,
  Z as isContainerSchema,
  N as isDateStr,
  C as isDateTimeStr,
  V as isEmptySchema,
  a as isEqual,
  $ as isFunction,
  W as isNewSchemaData,
  q as isNumber,
  R as isObject,
  w as isQuantity,
  G as isSameParent,
  S as isSelect,
  x as isString,
  z as isStructuredSchema,
  D as isTimeStr,
  O as isURL,
  J as json2schema,
  ne as json2treeData,
  c as keyRoute2indexRoute,
  A as metaElemAnalyzer,
  Y as moveBackward,
  X as moveForward,
  i as objClone,
  P as oldSchemaToNewSchema,
  B as oldSchemaToNewSchemaV1,
  U as registerExpectType,
  ie as schema2json,
  ae as schemaMetaList,
  p as truncate,
};
